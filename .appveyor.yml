environment:
  global:
    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
    # /E:ON and /V:ON options are not enabled in the batch script intepreter
    # See: http://stackoverflow.com/a/13751649/163740
    CMD_IN_ENV: "cmd /E:ON /V:ON /C %APPVEYOR_BUILD_FOLDER%\\ci\\appveyor\\run_with_env.cmd"
    PYTHONIOENCODING: "UTF-8"
  matrix:
    - TARGET_ARCH: "x64"
      CONDA_PY: "27"
      PY_CONDITION: "python >=2.7,<3"
      CONDA_INSTALL_LOCN: "C:\\Miniconda-x64"
      PYTHON: "C:\\Miniconda-x64"
    - TARGET_ARCH: "x64"
      CONDA_PY: "35"
      PY_CONDITION: "python >=3.5,<3.6"
      CONDA_INSTALL_LOCN: "C:\\Miniconda35-x64"
      PYTHON: "C:\\Miniconda35-x64"
    - TARGET_ARCH: "x64"
      CONDA_PY: "36"
      PY_CONDITION: "python >=3.6"
      CONDA_INSTALL_LOCN: "C:\\Miniconda36-x64"
      PYTHON: "C:\\Miniconda36-x64"

    # Pre-installed Python versions, which Appveyor may upgrade to
    # a later point release.
    # - PYTHON: "C:\\Python27_64"
    #   PYTHON_VERSION: "2.7"
    #   PYTHON_ARCH: "64"
    #   CONDA_PY: "27"
    #   CONDA_NPY: "18"

    # - PYTHON: "C:\\Python34_32"
    #   PYTHON_VERSION: "3.4"
    #   PYTHON_ARCH: "32"
    #   CONDA_PY: "34"
    #   CONDA_NPY: "18"

    # - PYTHON: "C:\\Python35-x64"
    #   PYTHON_VERSION: "3.5.x" # currently 3.5.1
    #   PYTHON_ARCH: "64"
    #   CONDA_PY: "35"
    #   CONDA_NPY: "18"

    # - PYTHON: "C:\\Python35"
    #   PYTHON_VERSION: "3.5.x" # currently 3.5.0
    #   PYTHON_ARCH: "32"
    #   PYTHON_EXE: python

    # - PYTHON: "C:\\Python27"
    #   PYTHON_VERSION: "2.7.x" # currently 2.7.11
    #   PYTHON_ARCH: "32"
    #   PYTHON_EXE: python

    # - PYTHON: "C:\\Python34"
    #   PYTHON_VERSION: "3.4.x" # currently 3.4.3
    #   PYTHON_ARCH: "32"
    #   PYTHON_EXE: python

# install:
  # this installs the appropriate Miniconda (Py2/Py3, 32/64 bit),
  # as well as pip, conda-build, and the binstar CLI
  # - powershell .\\continuous-integration\\appveyor\\install.ps1
  # - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"


cache:
  - "%TMP%\\py\\"

install:
  # Build wheel
  # - "%PYEXE% setup.py install"
  # - ps: "ls dist"
  # # Now install the wheel.
  # # I couldn't get wildcards to work for pip install, so stuff it
  # # into a variable, using python to glob.
  # - "%PYEXE% -c \"import glob; print(glob.glob('dist/*whl')[0])\" > whl.txt"
  # - set /p PYWHL=<whl.txt
  # - pip install %PYWHL%
  - cmd: set CONDA_NPY=19

  # Remove cygwin (and therefore the git that comes with it).
  - cmd: rmdir C:\cygwin /s /q

  # Use the pre-installed Miniconda for the desired arch
  - cmd: call %CONDA_INSTALL_LOCN%\Scripts\activate.bat
  - cmd: conda config --add channels conda-forge
  - cmd: conda config --set show_channel_urls true
  - cmd: conda update --yes --quiet conda

  - cmd: conda install --yes --quiet conda-build-all
  - cmd: conda install --yes --quiet conda-forge-build-setup
  - cmd: run_conda_forge_build_setup

build_script:
  - conda build conda-recipe
  # - "%CMD_IN_ENV% python setup.py bdist_wheel"
  - python setup.py bdist_wheel
  - ls dist/*

test_script:
  - cmd: mkdir conda_packages
  # Uncomment the following two lines to make any conda packages created
  # available as build artifacts in AppVeyor
  # - cmd: 'copy /Y C:\Miniconda\conda-bld\win-32\*.bz2 conda_packages || cmd /c "exit /b 0"'
  - cmd: 'copy /Y C:\blk\win-64\*.bz2 conda_packages || cmd /c "exit /b 0"'
  # - python ci\move-conda-package.py conda-recipe
  # Run the project tests
  # - "%PYEXE% setup.py nosetests"
  # - "%PYEXE% -c 'import sys; sys.version_info >= (3,) and sys.exit(1)' || eval \"2to3 -nw embedded_server\\*.py && 2to3 tests\\*.py -o tests3 -nw && cp tests\\test_client_private_key* tests3\\ && %PYEXE% setup.py nosetests -w tests3\\""

# after_test:
#   # We already built the wheel during build_script, because it's
#   # much faster to do that and install from the wheel than to
#   # rebuild it here (because we wind up re-building all the cython
#   # code, even though it's already built on disk; our make.cmd is not smart)
#   #- "%CMD_IN_ENV% %PYEXE% setup.py bdist_wheel bdist_wininst"
#   - ps: "ls dist"
#   - ps: "python -c 'import ssh2.session'"

platform:
- x64

artifacts:
  # Archive the generated wheel package in the ci.appveyor.com build report.
  - path: '*.tar.bz2'
  - path: 'conda_packages\*.bz2'
  - path: 'dist\*.whl'

#on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
#
